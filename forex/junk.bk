# def plot_earn_graph(df, buyColName):
#     positions = []
#     balance = 0
#     df.at[list(df.index)[0], "balance"] = 0
#     close_i = df.columns.get_loc('Close') 
#     buyNext = False
#     for i, row in enumerate(df.itertuples()):
#         curTimestamp = row.Timestamp.to_pydatetime()
#         curClose = row.Close
#         isIncreasing = getattr(row, buyColName)

#         if buyNext:
#             positions.append({
#                 'Close': curClose,
#                 'Timestamp': row.Timestamp.to_pydatetime()
#             })
#             buyNext = False
#         if isIncreasing == 1:
#             buyNext = True
#         if len(positions) > 0:
#             shouldCutPositions = [pos for pos in positions if curClose - pos['Close'] <= -0.0050 or curClose - pos['Close'] >= 0.02 or (curTimestamp - pos['Timestamp']).total_seconds() >= 1800]
#             for pendingCutPos in shouldCutPositions:
#                 netProfit = curClose - pendingCutPos['Close']
#                 # print(str(i) + ": " + str(netProfit) + " | balance: "+ str(balance))
#                 balance += netProfit * 10000
#                 positions.remove(pendingCutPos)
#         df.loc[row.Index, 'balance'] = balance
#     plot_fields(df, ['balance'])



# p = OHLC(path.join('F:\\modified_data', 'USDJPY_Daily_(1-1-2008_31-12-2017).csv'))
# p.plot_fields('Close')
# sys.exit()

# p = OHLC(path.join('F:\\modified_data', 'balance_forward_16_04.csv'))
# p.plot_fields('Balance')
# sys.exit()

p = OHLC(path.join('F:\\modified_data', 'USDJPY_1MIN_(1-1-2008_31-12-2017)_with_returns.csv'))
p.plot_fields('Normalized_PIP_Return_forward_looking_for_16mins_max', [], parseISODateTime('2010-01-01T00:00:00'), parseISODateTime('2010-12-31T00:00:00'))
sys.exit()

# p = OHLC(path.join('F:\\modified_data', 'USDJPY_1MIN_(1-1-2008_31-12-2017).csv'))
# p.set_df(p.get_df_with_resolution('1min'))
# p.merge_df(p.get_mins_returns_cols([1,2,4,8,16,32], 'mins'))
# p.merge_df(p.get_normalized_price([15, 30, 60, 120, 240, 1440, 10080, 43200], 'mins'))
# p.save(path.join('F:\\modified_data', 'USDJPY_1MIN_(1-1-2008_31-12-2017)_with_returns_2.csv'))
# sys.exit()

for currencyPair in currencyPairs:
    p = OHLC(path.join('F:\\modified_data', currencyPair+'_1MIN_(1-1-2008_31-12-2017).csv'))
    p.set_df(p.get_df_with_resolution('1min'))
    p.merge_df(p.get_mins_returns_cols([1,2,4,8,16,32], 'mins'))
    p.merge_df(p.get_normalized_price([15, 30, 60, 120, 240, 1440, 10080, 43200], 'mins'))
    p.save(path.join('F:\\modified_data', currencyPair+'_1MIN_(1-1-2008_31-12-2017)_with_returns.csv'))
sys.exit()


cl = df['Close'].as_matrix().reshape(-1, 1)
scaler = MinMaxScaler()
scaler.fit(cl)
cl = scaler.transform(cl)
print(cl)
df['norm_Close'] = cl
print(df)
df['Close'] = df['Close'] / 100
plot_fields(df, ['Close', 'norm_Close'])

'''
tradeRecordCSV = path.join(script_dir, 'trade-record-simple.csv')
ohlcCSV = path.join(data_dir, 'EURUSD_Daily_(1-1-2008_31-12-2017).csv')
# df = set_df_Timestamp_as_datetime(pd.read_csv(ohlcCSV))
# print(get_df_by_datetime_range(df, parseISODateTime('2008-01-02T00:00:00'), parseISODateTime('2017-01-03T00:00:00')))
# close = np.random.random(100)
# smaStrategy = SMA(60*60*24*3) 
# result = smaStrategy.calculate(df, parseISODateTime('2001-01-07T00:00:00'))
# print(result)
# plt.plot(result)
# plt.ylabel('some numbers')
# plt.show()


# ohlc_s_csv = path.join(data_dir, 'EURUSD_1MIN_(1-1-2008_31-12-2017).csv')
# df = set_df_Timestamp_as_datetime(pd.read_csv(ohlc_s_csv))
# df.index = pd.DatetimeIndex(df['Timestamp'])
# df = df.resample('1D').pad()
# macd, macdsignal, macdhist = talib.MACD(df['Close'], fastperiod=12, slowperiod=26, signalperiod=9)
# plt.plot(macdhist, label='macdhist')
# macd = MACD()
# singal, signal_strength = macd.generate_signal(df)
# plt.plot(signal_strength / 50, label='signal_strength')
# plt.plot(singal * signal_strength / 50, label='signal')
# plt.axhline(y=0, color='r', linestyle='-')
# plt.ylabel('some numbers')
# plt.legend()
# plt.show()

ohlc_s_csv = path.join(data_dir, 'USDJPY_1MIN_(1-1-2008_31-12-2017).csv')
df = set_df_Timestamp_as_datetime(pd.read_csv(ohlc_s_csv))
df.index = pd.DatetimeIndex(df['Timestamp'])
df = df.resample('5min').pad() # pad: fill NaN with previous value 




# Calculate log return, and forward looking to generate
df['LogReturn'] = np.log(df.Close/df.Close.shift(1))
df['Forward5LogReturn'] = df['LogReturn'][::-1].rolling(5).sum()[::-1] - df['LogReturn']
df['Forward10LogReturn'] = df['LogReturn'][::-1].rolling(10).sum()[::-1] - df['LogReturn']
# df['Forward15LogReturn'] = df['LogReturn'][::-1].rolling(15).sum()[::-1] - df['LogReturn']
# df['Forward30LogReturn'] = df['LogReturn'][::-1].rolling(30).sum()[::-1] - df['LogReturn']
# df['Forward60LogReturn'] = df['LogReturn'][::-1].rolling(60).sum()[::-1] - df['LogReturn']
# df['Forward360LogReturn'] = df['LogReturn'][::-1].rolling(360).sum()[::-1] - df['LogReturn']

print(df.head(10))
print(df.tail(10))

records = df
# plt.plot(records["Close"] / 100000, label='Close')
plt.plot(records["Forward5LogReturn"], label='Forward5LogReturn')
plt.plot(records["Forward10LogReturn"], label='Forward10LogReturn')
# plt.plot(records["Forward5LogReturn"], label='Forward5LogReturn')
# plt.plot(records["Forward15LogReturn"], label='Forward15LogReturn')
# plt.plot(records["Forward30LogReturn"], label='Forward30LogReturn')
# plt.plot(records["Forward60LogReturn"], label='Forward60LogReturn')
# plt.plot(records["Forward360LogReturn"], label='Forward360LogReturn')
plt.axhline(y=0, color='r', linestyle='-')
plt.ylabel('some numbers')
plt.legend()
plt.show()

sys.exit()





macd = MACD()
df = macd.generate_buy_sell_records(df)




print(df.head())
df = df.loc[abs(df["MACD"])==1]
print(df.head())
print(len(df.index))


records = df.loc[abs(df['MACD'])==1]
records['CloseDiff'] = records['Close'].diff()
records['MACDDiff'] = records['MACD'].diff()
records.at[list(records.index)[0], "cash_balance"] = 100
records.at[list(records.index)[0], "holding_units"] = 0
records.at[list(records.index)[0], "total_asset_value"] = 100
print(records.head())

close_i = records.columns.get_loc('Close')
close_diff_i = records.columns.get_loc('CloseDiff')
macd_col_i = records.columns.get_loc('MACD')
macd_diff_col_i = records.columns.get_loc('MACDDiff')
cash_balance_i = records.columns.get_loc('cash_balance')
holding_units_i = records.columns.get_loc('holding_units')
total_asset_value_i = records.columns.get_loc('total_asset_value')
for i, row in enumerate(records.itertuples()):
    if i == 0:
        continue

    curCloseDiff = records.iat[i, close_diff_i]
    curMACD = records.iat[i, macd_col_i]
    curMACDDiff = records.iat[i, macd_diff_col_i]

    if curMACDDiff == -2:
        records.iat[i, total_asset_value_i] = records.iat[i-1, total_asset_value_i] + curCloseDiff * 100
    else:
        records.iat[i, total_asset_value_i] = records.iat[i-1, total_asset_value_i]

print(records.tail())
plt.plot(records["Close"] * 100, label='Close')
plt.plot(records["total_asset_value"], label='total_asset_value')
plt.axhline(y=0, color='r', linestyle='-')
plt.ylabel('some numbers')
plt.legend()
plt.show()

sys.exit()





df.at[list(df.index)[0], "cash_balance"] = 100
df.at[list(df.index)[0], "holding_units"] = 0
df.at[list(df.index)[0], "total_asset_value"] = 100

print(df.head())
for i, row in enumerate(df.itertuples()):
    if i == 0:
        continue

    close_i = df.columns.get_loc('Close')
    macd_col_i = df.columns.get_loc('MACD')
    cash_balance_i = df.columns.get_loc('cash_balance')
    holding_units_i = df.columns.get_loc('holding_units')
    total_asset_value_i = df.columns.get_loc('total_asset_value')

    curClose = df.iat[i, close_i]
    curMACD = df.iat[i, macd_col_i]
    curCash = df.iat[i, cash_balance_i] = df.iat[i-1, cash_balance_i]
    curHolding = df.iat[i, holding_units_i] = df.iat[i-1, holding_units_i]
    curTotal = df.iat[i, total_asset_value_i] = df.iat[i-1, total_asset_value_i]

    if curMACD == 1 and curCash > 0:
        curHolding += curCash / curClose
        curCash = 0
    elif curMACD == -1 and curHolding > 0:
        curCash += curHolding * curClose
        curHolding = 0
    curTotal = curHolding * curClose + curCash

    df.iat[i, cash_balance_i] = curCash
    df.iat[i, holding_units_i] = curHolding
    df.iat[i, total_asset_value_i] = curTotal
    
print(df.tail())
plt.plot(df["Close"] * 100, label='Close')
plt.plot(df["total_asset_value"], label='total_asset_value')
plt.axhline(y=0, color='r', linestyle='-')
plt.ylabel('some numbers')
plt.legend()
plt.show()
'''



#%% Compare the total returns between different signal classes
mergedDf = None
for i in range(1, 7):
    print(i)
    trade = allTrades[i-1].copy()
    # trade = trade.groupby(['Timestamp'])['Balance'].sum().reset_index()
    # trade.columns = ['Timestamp', 'Signal_'+str(i)+'_Profit', 'Signal_'+str(i)+'_Balance']
    if i==1:
        mergedDf = trade.set_index('Timestamp')
    else:
        mergedDf = mergedDf.join(trade.set_index('Timestamp'))
mergedDf.fillna(method='ffill', inplace=True)
mergedDf.fillna(0, inplace=True)
mergedDf




#%%
# print('X_test shape: ')
# print(X_test.shape)
# predicted_stock_price_multi_head = lstm_bert.predict(X_test)
# print('predicted_stock_price_multi_head shape: ')
# print(predicted_stock_price_multi_head.shape)
# predicted_stock_price_multi_head = np.vstack((np.full((SEQ_LEN,1), np.nan), predicted_stock_price_multi_head))

# session.close()


#%%
# reverseScaled_predicted_stock_price_multi_head = np.copy(predicted_stock_price_multi_head)

# actualVals = test_df[['Close']].values
# predictedVals = []
# for i in range(SEQ_LEN, len(reverseScaled_predicted_stock_price_multi_head)):
#     minMaxScaler.fit(actualVals[i-SEQ_LEN:i])
#     reverseScaled_predicted_stock_price_multi_head[i] = minMaxScaler.inverse_transform([reverseScaled_predicted_stock_price_multi_head[i]])[0]

# reverseScaled_predicted_stock_price_multi_head

#%%
# import matplotlib.pyplot as plt
# print(predicted_stock_price_multi_head)
# plt.figure(figsize = (18,9))
# plt.plot(test_df[['Close']].values, color = 'red', label = 'Actual Price')
# plt.plot(reverseScaled_predicted_stock_price_multi_head, color = 'green', label = 'Predicted Price')
# plt.title('USDJPY Price Prediction', fontsize=30)
# #plt.xticks(range(0,df.shape[0],50),df['Date'].loc[::50],rotation=45)
# plt.xlabel('Date')
# plt.ylabel('Price')
# plt.legend(fontsize=18)
# plt.show()

#%%
# prices = test_df[['Close']].values
# act_diff = np.diff(prices.reshape(1,-1)[0])
# predicted_diff = np.diff(reverseScaled_predicted_stock_price_multi_head.reshape(1,-1)[0]) #predicted_stock_price_multi_head.reshape(1, -1)[0] #np.diff(reverseScaled_predicted_stock_price_multi_head.reshape(1,-1)[0])
# predicted_diff = np.copy(predicted_stock_price_multi_head)
# predicted_diff = np.concatenate((np.array([np.nan]), np.diff(predicted_diff.reshape(1, -1)[0])), axis=None)

# print('predicted_diff shape:')
# print(type(predicted_diff))
# print(predicted_diff.shape)
# print(predicted_diff)

#%%



#%%

# for i in range(0, len(predicted_diff)):
#     if not np.isfinite(predicted_diff[i]):
#         records.append(0)
#         balance.append(0)
#         continue
#     if i>0 and not np.isfinite(predicted_diff[i-1]):
#         records.append(0)
#         balance.append(0)
#         continue

#     curPrice = prices[i-1][0]

#     curPrediction = predicted_diff[i][0]
#     prePrediction = predicted_diff[i-1][0]

#     if curPrediction > prePrediction:
#         long_cash_balance -= curPrice
#         long_holding += 1

#         short_cash_balance -= (short_holding * curPrice)
#         short_holding = 0

#         records.append(1)
#     elif curPrediction < prePrediction:
#         long_cash_balance += (long_holding * curPrice)
#         long_holding = 0

#         short_cash_balance += curPrice
#         short_holding += 1

#         records.append(-1)
#     else:
#         records.append(0)
#     balance.append((long_cash_balance+(long_holding * curPrice)) + (short_cash_balance-(short_holding * curPrice)))

# print('Long Holding & Balance:')
# print(long_holding)
# print(long_cash_balance)

# print('Short Holding & Balance:')
# print(short_holding)
# print(short_cash_balance)

# print(balance[-1])

# # plt.figure(figsize = (18,9))
# # plt.plot(balance, color = 'red', label = 'Actual Price')
# # plt.plot(balance, color = 'red', label = 'Actual Price')
# # plt.title('USDJPY Price Prediction', fontsize=30)
# # plt.xlabel('Date')
# # plt.ylabel('Price')
# # plt.legend(fontsize=18)
# # plt.show()


# fig, ax1 = plt.subplots()
# color = 'tab:red'
# ax1.set_xlabel('Datetime')
# ax1.set_ylabel('Price', color=color)
# ax1.plot(prices, label='Price', color=color)
# ax1.tick_params(axis='y', labelcolor=color)
# ax1.legend()

# ax2 = ax1.twinx()
# ax2.plot(balance, label='Balance')
# ax2.legend()

# fig.tight_layout()
# plt.show()










# #%%

# p = OHLC(path.join(dataDir, 'USDJPY_1MIN_(1-1-2008_31-12-2017).csv'))
# # p.set_df(p.get_df_with_resolution('30min'))

# p.df.reset_index(drop=True, inplace=True)

# print(p.df['Close'])
# minMaxScale = lambda x: minMaxScaler.fit_transform(x.reshape(-1,1)).reshape(1, len(x))[0][-1]
# rollingWindow = 24 * 30 * 6
# p.df['MinMaxScaled_Open'] = p.df['Open'].rolling(rollingWindow).apply(minMaxScale)
# p.df['MinMaxScaled_High'] = p.df['High'].rolling(rollingWindow).apply(minMaxScale)
# p.df['MinMaxScaled_Low'] = p.df['Low'].rolling(rollingWindow).apply(minMaxScale)
# p.df['MinMaxScaled_Close'] = p.df['Close'].rolling(rollingWindow).apply(minMaxScale)

# #%%
# df = p.df

# #%%
# allData = df[['MinMaxScaled_Close']].values
# X_allData = []
# for i in range(SEQ_LEN, len(allData)):
#     X_allData.append(allData[i-SEQ_LEN:i])

# predicted_stock_price_multi_head_val = lstm_bert.predict(np.array(X_allData))
# print(predicted_stock_price_multi_head_val.shape)
# predicted_stock_price_multi_head_val = np.vstack((np.full((SEQ_LEN,1), np.nan), predicted_stock_price_multi_head_val))

# reverseScaled_predicted_stock_price_multi_head_val = np.copy(predicted_stock_price_multi_head_val)

# actualVals = df[['Close']].values
# predictedVals = []
# for i in range(SEQ_LEN, len(reverseScaled_predicted_stock_price_multi_head_val)):
#     minMaxScaler.fit(actualVals[i-SEQ_LEN:i])
#     reverseScaled_predicted_stock_price_multi_head_val[i] = minMaxScaler.inverse_transform([reverseScaled_predicted_stock_price_multi_head_val[i]])[0]

# reverseScaled_predicted_stock_price_multi_head_val


# act_diff = np.diff(df[['Close']].values.reshape(1,-1)[0])
# predicted_diff = np.diff(reverseScaled_predicted_stock_price_multi_head_val.reshape(1,-1)[0])

# prices = df[['Close']].values
# cash_balance = 0
# holding = 0

# records = [0]
# balance = [0]
# for i in range(0, len(predicted_diff)):
#     if not np.isfinite(predicted_diff[i]):
#         records.append(0)
#         balance.append(0)
#         continue
#     if i>0 and not np.isfinite(predicted_diff[i-1]):
#         records.append(0)
#         balance.append(0)
#         continue

#     curPrice = prices[i-1][0]
#     if predicted_diff[i] > predicted_diff[i-1]:
#         cash_balance -= curPrice
#         holding += 1
#         records.append(1)
#     elif predicted_diff[i] < predicted_diff[i-1]:
#         cash_balance += curPrice
#         holding -= 1
#         records.append(-1)
#     else:
#         records.append(0)
#     balance.append(cash_balance+(holding * curPrice))

# print(holding)
# print(cash_balance)
# plt.plot(balance, color = 'red', label = 'Actual Price')





from multiprocessing import Process
def runInParallel(*fns):
  proc = []
  for fn in fns:
    p = Process(target=fn)
    p.start()
    proc.append(p)
  for p in proc:
    p.join()
